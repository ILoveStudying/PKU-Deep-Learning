diff -u 01-svhn/common.py homework1/q3.b.30000.diff/common.py
--- 01-svhn/common.py	2019-03-20 18:44:19.983937800 +0800
+++ homework1/q3.b.30000.diff/common.py	2019-03-20 22:41:02.209570300 +0800
@@ -12,7 +12,7 @@
 
 class Config:
     '''where to write all the logging information during training(includes saved models)'''
-    log_dir = '../train_log'
+    log_dir = '../../train_log'
 
     '''where to write model snapshots to'''
     log_model_dir = os.path.join(log_dir, 'models')
@@ -23,7 +23,7 @@
     nr_channel = 3
     image_shape = (32, 32)
     nr_class = 10
-    nr_epoch = 60
+    nr_epoch = 40
     weight_decay = 1e-10
 
     show_interval = 100
diff -u 01-svhn/dataset.py homework1/q3.b.30000.diff/dataset.py
--- 01-svhn/dataset.py	2019-03-20 18:59:34.214717600 +0800
+++ homework1/q3.b.30000.diff/dataset.py	2019-03-20 22:41:02.211564000 +0800
@@ -15,10 +15,9 @@
 
 from common import config
 
-class Dataset():
-    #dataset_path = '../../dataset/SVHN'
-    dataset_path = '..'
 
+class Dataset():
+    dataset_path = '../..'
 
     def __init__(self, dataset_name):
         self.minibatch_size = config.minibatch_size
@@ -43,8 +42,6 @@
             labels_list.append(samples['y'])
         datas = np.concatenate(datas_list, axis=3)
         labels = np.concatenate(labels_list, axis=0)
-        if self.ds_name == "train":
-            self.instances=10000
         self.samples_mat = {
             'X': datas,
             'Y': labels,
@@ -59,12 +56,37 @@
     def minibatchs_per_epoch(self):
         return self.instances // config.minibatch_size
 
+    def affine_transformation(self, img):
+        rows, cols, dims = img.shape
+        choice = np.random.choice(['scale', 'rotate', 'shift', 'affine'])
+        if choice == 'scale':
+            # 放缩
+            scale = np.random.choice([0.8, 0.9, 1.0, 1.1, 1.2])
+            img = cv2.resize(img, dsize=(int(rows * scale), int(cols * scale)), interpolation=cv2.INTER_LINEAR)
+        elif choice == 'rotate':
+            # 旋转
+            RotateMatrix = cv2.getRotationMatrix2D(center=(cols / 2, rows / 2), angle=90, scale=1.2)
+            img = cv2.warpAffine(img, RotateMatrix, (rows * 2, cols * 2))
+        elif choice == 'shift':
+            # 平移
+            TranslationMatrix = np.float32([[1, 0, 5], [0, 1, 2]])
+            img = cv2.warpAffine(img, TranslationMatrix, (rows, cols))
+        elif choice == 'affine':
+            # 仿射变换
+            pts1 = np.float32([[0, 0], [cols - 1, 0], [0, rows - 1]])
+            pts2 = np.float32([[cols * 0.2, rows * 0.1], [cols * 0.9, rows * 0.2], [cols * 0.1, rows * 0.9]])
+            M_affine = cv2.getAffineTransform(pts1, pts2)
+            img = cv2.warpAffine(img, M_affine, (cols, rows))
+        return img
+
     def instance_generator(self):
         for i in range(self.instances):
             img = self.samples_mat['X'][:, :, :, i]
             label = self.samples_mat['Y'][i, :][0]
             if label == 10:
                 label = 0
+            if self.ds_name == "train":
+                img = self.affine_transformation(img)
             img = cv2.resize(img, config.image_shape)
             yield img.astype(np.float32), np.array(label, dtype=np.int32)
 
@@ -83,10 +105,9 @@
             imggrid.append(img)
 
         imggrid = np.array(imggrid).reshape((5, 5, img.shape[0], img.shape[1], img.shape[2]))
-        imggrid = imggrid.transpose((0, 2, 1, 3, 4)).reshape((5*img.shape[0], 5*img.shape[1], 3))
+        imggrid = imggrid.transpose((0, 2, 1, 3, 4)).reshape((5 * img.shape[0], 5 * img.shape[1], 3))
         cv2.imshow('', imggrid.astype('uint8'))
         c = chr(cv2.waitKey(0) & 0xff)
         if c == 'q':
             exit()
         imggrid = []
-
diff -u 01-svhn/train.py homework1/q3.b.30000.diff/train.py
--- 01-svhn/train.py	2019-03-19 13:01:10.000000000 +0800
+++ homework1/q3.b.30000.diff/train.py	2019-03-20 22:41:02.208573600 +0800
@@ -71,7 +71,7 @@
 
     ## train config
     global_steps = tf.Variable(0, trainable=False)
-    boundaries = [train_set.minibatchs_per_epoch*15, train_set.minibatchs_per_epoch*40]
+    boundaries = [train_set.minibatchs_per_epoch*15, train_set.minibatchs_per_epoch*25]
     values = [0.01, 0.001, 0.0005]
     lr = tf.train.piecewise_constant(global_steps, boundaries, values)
     #opt = tf.train.MomentumOptimizer(lr, momentum=0.9) # set optimizer
