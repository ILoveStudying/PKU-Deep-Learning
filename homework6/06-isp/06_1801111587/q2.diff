diff -u -- 06_1801111587/q2/common.py super-resolution/common.py
--- 06_1801111587/q2/common.py	2019-06-12 13:43:54.481000000 +0800
+++ super-resolution/common.py	2019-06-01 05:10:06.000000000 +0800
@@ -23,7 +23,7 @@
     show_interval = 2
     snapshot_interval = 2
     test_interval = 1
-    ratio = 2
+    ratio = 3
     @property
     def input_shape(self):
         return (self.minibatch_size, self.nr_channel) + self.image_shape
diff -u -- 06_1801111587/q2/dataset.py super-resolution/dataset.py
--- 06_1801111587/q2/dataset.py	2019-06-12 16:05:40.295100100 +0800
+++ super-resolution/dataset.py	2019-06-10 12:27:48.417922600 +0800
@@ -23,8 +23,8 @@
 
     def __init__(self, dataset_name):
 
-        test_dataset_path = ['../dataset/Set14/image_SRF_2']
-        train_dataset_path = '../dataset/BSDS200'
+        test_dataset_path = ['../dataset/Set14/image_SRF_3']
+        train_dataset_path = '../dataset/T91'
         self.minibatch_size = config.minibatch_size
         self.ds_name = dataset_name
         self.rng = np.random
diff -u -- 06_1801111587/q2/model.py super-resolution/model.py
--- 06_1801111587/q2/model.py	2019-06-11 21:44:46.602000000 +0800
+++ super-resolution/model.py	2019-06-01 05:10:06.000000000 +0800
@@ -9,9 +9,6 @@
 class Model():
     def __init__(self, depth = 3):
         # set the initializer of conv_weight and conv_bias
-
-
-
         self.weight_init = tf_contrib.layers.variance_scaling_initializer(factor=1.0,
                                 mode='FAN_IN', uniform=False)
         self.bias_init = tf.zeros_initializer()
diff -u -- 06_1801111587/q2/train.py super-resolution/train.py
--- 06_1801111587/q2/train.py	2019-06-12 14:58:42.255000000 +0800
+++ super-resolution/train.py	2019-06-10 16:49:34.749051900 +0800
@@ -9,10 +9,10 @@
 from model import Model
 from dataset import Dataset
 from skimage.measure import compare_psnr
+from skimage import color as skco
 from common import config
 from utils import from_sub_pixel_to_img
 
-
 def get_dataset_batch(ds_name):
     dataset = Dataset(ds_name)
     ds_gnr = dataset.load().instance_generator
@@ -86,12 +86,11 @@
             global_cnt = epoch_start * train_set.minibatchs_per_epoch
 
         ## training
-        file= open('./psnr_ratio2', 'w+')
-        for epoch in range(epoch_start + 1, config.nr_epoch + 1):
+        for epoch in range(epoch_start+1, config.nr_epoch+1):
             for _ in range(train_set.minibatchs_per_epoch):
                 global_cnt += 1
                 lr_images, sr_images = sess.run(train_batch_gnr)
-                # 128*7*7*3,128*9*9*27
+
                 feed_dict = {
                     placeholders['data']: lr_images[:, :, :, :1],
                     gt: sr_images[:, :, :, :1 * config.ratio * config.ratio],
@@ -100,7 +99,7 @@
                 }
                 _, loss_v, loss_reg_v, lr_v, summary = sess.run([train, loss, loss_reg,
                                                                  lr, merged],
-                                                                feed_dict=feed_dict)
+                                                                       feed_dict=feed_dict)
                 if global_cnt % config.show_interval == 0:
                     train_writer.add_summary(summary, global_cnt)
                     print(
@@ -119,25 +118,21 @@
             if epoch % config.test_interval == 0:
                 psnrs = []
                 for _ in range(test_set.testing_minibatchs_per_epoch):
-                    lr_image, hr_image = sess.run(test_gnr)
+                    lr_image, hr_image  = sess.run(test_gnr)
                     feed_dict = {
                         placeholders['data']: lr_image[:, :, :, :1],
                         placeholders['is_training']: False,
                     }
-                    restored_v = sess.run([restored], feed_dict=feed_dict)
+                    restored_v = sess.run([restored],feed_dict = feed_dict)
                     restored_img_y = from_sub_pixel_to_img(restored_v[0][0], config.ratio)
-                    if epoch==199:
-                        img = np.clip(restored_img_y[:, :, 0], 0, 1) * 255
-                        img = img.astype('uint8')
-                        cv2.imwrite('./output/{}.png'.format(global_cnt), img)
-                        global_cnt+=1
+
                     edge = int(config.edge / 2 * config.ratio)
                     psnr_y = compare_psnr(hr_image[0, edge:-edge, edge:-edge, :1], restored_img_y)
                     psnrs.append(psnr_y)
-                file.write(str(np.mean(psnrs)) + '\n')
+                    
                 print('average psnr is {:2.2f} dB'.format(np.mean(psnrs)))
         print('Training is done, exit.')
-        file.close()
+
 if __name__ == "__main__":
     try:
         main()
